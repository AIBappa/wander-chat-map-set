
import React, { useState } from 'react';
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Wallet } from 'lucide-react';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { toast } from 'sonner';

// In a real app, this would be fetched from a backend
const useWallet = () => {
  const [balance, setBalance] = useState(localStorage.getItem('walletBalance') ? 
    parseFloat(localStorage.getItem('walletBalance')!) : 0);
  
  const addMoney = (amount: number) => {
    const newBalance = balance + amount;
    setBalance(newBalance);
    localStorage.setItem('walletBalance', newBalance.toString());
    return newBalance;
  };
  
  return { balance, addMoney };
};

interface RazorpayOptions {
  key: string;
  amount: number;
  currency: string;
  name: string;
  description: string;
  order_id: string;
  handler: (response: any) => void;
  prefill: {
    name: string;
    email: string;
    contact: string;
  };
  theme: {
    color: string;
  };
}

declare global {
  interface Window {
    Razorpay: {
      new(options: RazorpayOptions): {
        open: () => void;
      };
    };
  }
}

const generateOrderId = () => {
  // In a real app, this would be generated by your backend
  return 'order_' + Math.random().toString(36).substring(2, 15);
};

const WalletSection = () => {
  const [amount, setAmount] = useState<string>('');
  const [isAddingMoney, setIsAddingMoney] = useState(false);
  const { balance, addMoney } = useWallet();
  
  const handleAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    if (/^\d*\.?\d*$/.test(value)) { // Allow only numbers and one decimal point
      setAmount(value);
    }
  };
  
  const loadRazorpayScript = (): Promise<boolean> => {
    return new Promise((resolve) => {
      const script = document.createElement('script');
      script.src = 'https://checkout.razorpay.com/v1/checkout.js';
      script.onload = () => resolve(true);
      script.onerror = () => resolve(false);
      document.body.appendChild(script);
    });
  };
  
  const handleAddMoney = async () => {
    if (!amount || parseFloat(amount) <= 0) {
      toast.error("Please enter a valid amount");
      return;
    }
    
    setIsAddingMoney(true);
    
    try {
      const amountInPaise = Math.round(parseFloat(amount) * 100); // Convert to paisa
      
      // Load Razorpay script
      const isLoaded = await loadRazorpayScript();
      if (!isLoaded) {
        toast.error("Failed to load payment gateway. Please try again later.");
        setIsAddingMoney(false);
        return;
      }
      
      // In a real app, these details would come from your backend
      const options: RazorpayOptions = {
        key: 'rzp_test_YOURKEYHERE', // Replace with your Razorpay key
        amount: amountInPaise,
        currency: 'INR',
        name: 'MyApp',
        description: 'Add money to wallet',
        order_id: generateOrderId(),
        handler: function(response) {
          // In a real app, verify this payment with your backend
          console.log('Payment successful', response);
          const newBalance = addMoney(parseFloat(amount));
          toast.success(`₹${amount} added to your wallet successfully!`);
          setAmount('');
          setIsAddingMoney(false);
        },
        prefill: {
          name: 'John Doe',
          email: 'john.doe@example.com',
          contact: '9999999999'
        },
        theme: {
          color: '#6366F1'
        }
      };
      
      const razorpay = new window.Razorpay(options);
      razorpay.open();
    } catch (error) {
      console.error('Payment error:', error);
      toast.error("Payment failed. Please try again.");
    } finally {
      setIsAddingMoney(false);
    }
  };

  return (
    <Card className="p-4 space-y-4">
      <div className="flex items-center justify-between">
        <h2 className="font-semibold text-lg flex items-center">
          <Wallet className="mr-2" /> My Wallet
        </h2>
        <div className="text-xl font-bold">₹{balance.toFixed(2)}</div>
      </div>
      
      <Dialog>
        <DialogTrigger asChild>
          <Button className="w-full">Add Money</Button>
        </DialogTrigger>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Add Money to Your Wallet</DialogTitle>
            <DialogDescription>
              Enter the amount you want to add to your wallet.
            </DialogDescription>
          </DialogHeader>
          
          <div className="flex items-center space-x-2 py-4">
            <span className="text-lg font-medium">₹</span>
            <Input
              type="text"
              placeholder="Amount"
              value={amount}
              onChange={handleAmountChange}
              className="text-lg"
              autoFocus
            />
          </div>
          
          <DialogFooter>
            <Button 
              variant="outline" 
              onClick={() => setAmount('')}
            >
              Cancel
            </Button>
            <Button 
              onClick={handleAddMoney} 
              disabled={!amount || isAddingMoney}
            >
              {isAddingMoney ? 'Processing...' : 'Proceed to Pay'}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
      
      <div className="text-sm text-gray-500">
        <p>Recent transactions will appear here</p>
      </div>
    </Card>
  );
};

export default WalletSection;
